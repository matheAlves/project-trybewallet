{"version":3,"sources":["services/currencyAPI.js","actions/index.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","pages/Login.js","components/Header.js","components/ExpenseForm.js","components/ExpenseTable.js","pages/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["getCurrencies","a","fetch","response","json","currencies","currenciesAction","type","fetchCurrenciesKeys","dispatch","Object","keys","filteredCurrencies","filter","value","addExpense","newExpense","exchangeRates","newExpenseAction","entries","forEach","currency","code","currencyData","fetchCurrencies","initialState","email","userReducer","state","action","expenses","walletReducer","rootReducer","combineReducers","user","wallet","store","createStore","composeWithDevTools","applyMiddleware","thunk","Login","validateButton","password","match","length","setState","buttonDisabled","handleSubmit","props","dispatchEmail","history","push","handleChange","target","name","this","className","htmlFor","placeholder","data-testid","id","onChange","disabled","onClick","React","Component","connect","userAction","Header","total","reduce","acc","curr","ask","toFixed","ExpenseForm","createDropdown","options","map","option","index","key","dispatchExpense","description","method","tag","ExpenseTable","expense","Number","parseFloat","Wallet","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.84a8171d.chunk.js","sourcesContent":["const getCurrencies = async () => {\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const currencies = await response.json();\n\n  return currencies;\n};\n\nexport default getCurrencies;\n","import getCurrencies from '../services/currencyAPI';\n\nexport const USER_ACTION = 'USER_ACTION';\nexport const CURRENCIES_ACTION = 'CURRENCIES_ACTION';\nexport const ADD_EXPENSE = 'ADD_EXPENSE';\n\nexport const userAction = (email) => ({\n  type: USER_ACTION,\n  email,\n});\n\nconst currenciesAction = (currencies) => ({\n  type: CURRENCIES_ACTION,\n  currencies,\n});\n\nconst fetchCurrenciesKeys = async (dispatch) => {\n  const response = await getCurrencies();\n  const currencies = Object.keys(response);\n  // source: https://love2dev.com/blog/javascript-remove-from-array/#:~:text=pop%20%2D%20Removes%20from%20the%20End,remove%20elements%20from%20an%20Array\n  const filteredCurrencies = currencies.filter((value) => value !== 'USDT');\n  dispatch(currenciesAction(filteredCurrencies));\n};\n\nexport const actionFetchCurrenciesKeys = () => fetchCurrenciesKeys;\n\nexport const addExpense = (newExpense, exchangeRates) => ({\n  type: ADD_EXPENSE,\n  newExpense: { ...newExpense, exchangeRates },\n});\n\nconst fetchCurrencies = (newExpense) => async (dispatch) => {\n  const exchangeRates = {};\n  const response = await getCurrencies();\n  const data = Object.entries(response);\n  data.forEach((currency) => {\n    const [code, currencyData] = currency;\n    exchangeRates[code] = currencyData;\n  });\n  dispatch(addExpense(newExpense, exchangeRates));\n};\n\nexport const newExpenseAction = (newExpense) => fetchCurrencies(newExpense);\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { USER_ACTION } from '../actions';\n\nconst initialState = {\n  email: '',\n};\n\nconst userReducer = (state = initialState, action) => {\n  switch (action.type) {\n  case USER_ACTION:\n    return { ...state, email: action.email };\n  default:\n    return state;\n  }\n};\n\nexport default userReducer;\n","import { CURRENCIES_ACTION, ADD_EXPENSE } from '../actions';\n\nconst initialState = {\n  currencies: [],\n  expenses: [],\n};\n\nconst walletReducer = (state = initialState, action) => {\n  switch (action.type) {\n  case CURRENCIES_ACTION:\n    return { ...state, currencies: action.currencies };\n  case ADD_EXPENSE:\n    return { ...state, expenses: [...state.expenses, action.newExpense] };\n  default:\n    return state;\n  }\n};\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport userReducer from './user';\nimport walletReducer from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nconst rootReducer = combineReducers({\n  user: userReducer,\n  wallet: walletReducer,\n});\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport './Login.css';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { userAction } from '../actions';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      buttonDisabled: true,\n      email: '',\n      password: '',\n    };\n  }\n\n  validateButton = () => {\n    const { email, password } = this.state;\n    // source: https://stackabuse.com/validate-email-addresses-with-regular-expressions-in-javascript/\n    const emailRegex = /[a-z0-9]+@[a-z]+\\.[a-z]{2,3}/i;\n    const minCharacters = 6;\n\n    if (email.match(emailRegex) && password.length >= minCharacters) {\n      this.setState({\n        buttonDisabled: false,\n      });\n    } else {\n      this.setState({\n        buttonDisabled: true,\n      });\n    }\n  }\n\n  handleSubmit = () => {\n    // event.preventDefault();\n    const { dispatchEmail, history } = this.props;\n    const { email } = this.state;\n\n    dispatchEmail(email);\n    history.push('/carteira');\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value }, () => {\n      this.validateButton();\n    });\n  }\n\n  render() {\n    const { buttonDisabled, email, password } = this.state;\n    return (\n      <form className=\"login-form\">\n        Login\n        <label htmlFor=\"email-input\">\n          <input\n            value={ email }\n            name=\"email\"\n            placeholder=\"email\"\n            data-testid=\"email-input\"\n            type=\"text\"\n            id=\"email-input\"\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"password-input\">\n          <input\n            value={ password }\n            name=\"password\"\n            placeholder=\"password\"\n            data-testid=\"password-input\"\n            type=\"password\"\n            id=\"password-input\"\n            onChange={ this.handleChange }\n          />\n        </label>\n\n        <button\n          type=\"submit\"\n          disabled={ buttonDisabled }\n          onClick={ this.handleSubmit }\n        >\n          Entrar\n        </button>\n      </form>\n    );\n  }\n}\n\nLogin.propTypes = {\n  dispatchEmail: PropTypes.func.isRequired,\n  history: PropTypes.shape({ push: PropTypes.func }).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchEmail: (email) => dispatch(userAction(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass Header extends React.Component {\n  render() {\n    const { email, expenses } = this.props;\n    const total = expenses.reduce((acc, curr) => {\n      acc += curr.value * curr.exchangeRates[curr.currency].ask;\n      return acc;\n    }, 0);\n\n    return (\n      <header>\n        <span data-testid=\"email-field\">\n          {email}\n        </span>\n        <span data-testid=\"total-field\">\n          {total.toFixed(2)}\n        </span>\n        <span data-testid=\"header-currency-field\">\n          BRL\n        </span>\n\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nconst mapStateToProps = (state) => {\n  const { user: { email }, wallet: { expenses } } = state;\n  return {\n    email,\n    expenses,\n  };\n};\n\nexport default connect(mapStateToProps, null)(Header);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { newExpenseAction } from '../actions';\n\nclass ExpenseForm extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      id: 0,\n      value: 0,\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    };\n  }\n\n  createDropdown = (options) => (\n    options.map((option, index) => (\n      <option\n        value={ option }\n        key={ index }\n      >\n        {option}\n      </option>))\n  );\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleSubmit = () => {\n    const { dispatchExpense, expenses } = this.props;\n    this.setState({\n      id: expenses.length,\n    }, () => {\n      dispatchExpense(this.state);\n      this.setState({\n        value: 0,\n      });\n    });\n  }\n\n  render() {\n    const paymentMethods = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\n    const tags = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n    const { currencies } = this.props;\n    const {\n      value,\n      description,\n    } = this.state;\n\n    return (\n      <form>\n\n        <label htmlFor=\"value-input\">\n          Valor:\n          <input\n            name=\"value\"\n            value={ value }\n            id=\"value-input\"\n            type=\"number\"\n            data-testid=\"value-input\"\n            onChange={ this.handleChange }\n          />\n        </label>\n\n        <label htmlFor=\"description-input\">\n          Descrição:\n          <input\n            name=\"description\"\n            value={ description }\n            id=\"description-input\"\n            type=\"text\"\n            data-testid=\"description-input\"\n            onChange={ this.handleChange }\n          />\n        </label>\n\n        <label htmlFor=\"currency-input\">\n          Moeda:\n          <select\n            name=\"currency\"\n            id=\"currency-input\"\n            data-testid=\"currency-input\"\n            onChange={ this.handleChange }\n          >\n            {this.createDropdown(currencies)}\n          </select>\n        </label>\n\n        <label htmlFor=\"method-input\">\n          Método de pagamento:\n          <select\n            name=\"method\"\n            id=\"method-input\"\n            data-testid=\"method-input\"\n            onChange={ this.handleChange }\n          >\n            {this.createDropdown(paymentMethods)}\n          </select>\n        </label>\n\n        <label htmlFor=\"tag-input\">\n          Categoria:\n          <select\n            name=\"tag\"\n            id=\"tag-input\"\n            data-testid=\"tag-input\"\n            onChange={ this.handleChange }\n          >\n            {this.createDropdown(tags)}\n          </select>\n        </label>\n\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Adicionar despesa\n        </button>\n\n      </form>\n    );\n  }\n}\n\nExpenseForm.propTypes = {\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  dispatchExpense: PropTypes.func.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchExpense: (newExpense) => dispatch(newExpenseAction(newExpense)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpenseForm);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass ExpenseTable extends React.Component {\n  render() {\n    const { expenses } = this.props;\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>Editar/Excluir</th>\n          </tr>\n        </thead>\n        <tbody>\n          {expenses.map((expense) => (\n            <tr key={ expense.id }>\n              <td>\n                {expense.description}\n              </td>\n              <td>\n                {expense.tag}\n              </td>\n              <td>\n                {expense.method}\n              </td>\n              <td>\n                {Number.parseFloat(expense.value).toFixed(2)}\n              </td>\n              <td>\n                {expense.exchangeRates[expense.currency].name}\n              </td>\n              <td>\n                {Number.parseFloat(\n                  expense.exchangeRates[expense.currency].ask,\n                ).toFixed(2)}\n              </td>\n              <td>\n                {Number.parseFloat(\n                  expense.value * expense.exchangeRates[expense.currency].ask,\n                ).toFixed(2)}\n              </td>\n              <td>\n                <p>Real</p>\n              </td>\n              <td>\n                <button\n                  type=\"button\"\n                >\n                  Excluir\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nExpenseTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps)(ExpenseTable);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport ExpenseForm from '../components/ExpenseForm';\nimport ExpenseTable from '../components/ExpenseTable';\nimport { actionFetchCurrenciesKeys } from '../actions';\n\nclass Wallet extends React.Component {\n  componentDidMount() {\n    const { getCurrencies } = this.props;\n    getCurrencies();\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <ExpenseForm />\n        <ExpenseTable />\n      </div>\n\n    );\n  }\n}\n\nWallet.propTypes = {\n  getCurrencies: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCurrencies: () => dispatch(actionFetchCurrenciesKeys()),\n});\n\nexport default connect(null, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route\n        exact\n        path=\"/\"\n        component={ Login }\n      />\n      <Route\n        exact\n        path=\"/carteira\"\n        component={ Wallet }\n      />\n    </Switch>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}